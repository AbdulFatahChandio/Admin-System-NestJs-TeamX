// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  output          = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  firstName String
  lastName  String
  userName  String   @unique
  averageRating  Decimal? @db.Decimal(3, 2)
  numberOfRating Int?

  role String @default("user")

  orders order[]

  feedback feedback[]
}

model book {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  title          String
  description    String
  publish_Year   String
  edition        String
  publisher      String
  price          Decimal  @default(100) @db.Decimal(10, 2)
  Stock          Int      @default(0)
  authorAverageRating  Decimal? @db.Decimal(3, 2)
  numberOfRating Int?
  averageRating  Decimal? @db.Decimal(3, 2)

  authorId   Int?    @default(autoincrement())
  authorName String?

  orders   order[]
  feedback feedback[]
}

model author_Profile {
  authorId   Int     @id @default(autoincrement())
  authorName String
  aboutAuthor String

  averageRating  Decimal @db.Decimal(3, 2)
  numberOfRating Int

}

model order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // title       String
  // author      String
  // description String
  customer        String
  unitPrice       Decimal    @db.Decimal(10, 2)
  quantity        Int
  totalPrice      Decimal    @db.Decimal(10, 2)
  shippingAddress String
  status          Status     @default(received)
  courierName     String?
  trackingId      String?
  feedbacks       feedback[]

  orderedBy user? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?

  bookOrdered book? @relation(fields: [bookId], references: [id], onDelete: SetNull)
  bookId      Int?
}

model feedback {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  reviews   String

  orderedBy user? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?

  bookOrdered book? @relation(fields: [bookId], references: [id], onDelete: SetNull)
  bookId      Int?

  ordered order? @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId Int?
}

enum Status {
  received
  packed
  shipped
  delivered
}

// enum Role {
//   USER
//   ADMIN
// }
